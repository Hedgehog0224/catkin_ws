// Generated by gencpp from file robot_pkg/servodata.msg
// DO NOT EDIT!


#ifndef ROBOT_PKG_MESSAGE_SERVODATA_H
#define ROBOT_PKG_MESSAGE_SERVODATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace robot_pkg
{
template <class ContainerAllocator>
struct servodata_
{
  typedef servodata_<ContainerAllocator> Type;

  servodata_()
    : header()
    , servo0(0)
    , servo1(0)
    , servo2(0)
    , servo3(0)
    , servo4(0)
    , servo5(0)  {
    }
  servodata_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , servo0(0)
    , servo1(0)
    , servo2(0)
    , servo3(0)
    , servo4(0)
    , servo5(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _servo0_type;
  _servo0_type servo0;

   typedef int32_t _servo1_type;
  _servo1_type servo1;

   typedef int32_t _servo2_type;
  _servo2_type servo2;

   typedef int32_t _servo3_type;
  _servo3_type servo3;

   typedef int32_t _servo4_type;
  _servo4_type servo4;

   typedef int32_t _servo5_type;
  _servo5_type servo5;





  typedef boost::shared_ptr< ::robot_pkg::servodata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_pkg::servodata_<ContainerAllocator> const> ConstPtr;

}; // struct servodata_

typedef ::robot_pkg::servodata_<std::allocator<void> > servodata;

typedef boost::shared_ptr< ::robot_pkg::servodata > servodataPtr;
typedef boost::shared_ptr< ::robot_pkg::servodata const> servodataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_pkg::servodata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_pkg::servodata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_pkg::servodata_<ContainerAllocator1> & lhs, const ::robot_pkg::servodata_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.servo0 == rhs.servo0 &&
    lhs.servo1 == rhs.servo1 &&
    lhs.servo2 == rhs.servo2 &&
    lhs.servo3 == rhs.servo3 &&
    lhs.servo4 == rhs.servo4 &&
    lhs.servo5 == rhs.servo5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_pkg::servodata_<ContainerAllocator1> & lhs, const ::robot_pkg::servodata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_pkg::servodata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_pkg::servodata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_pkg::servodata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_pkg::servodata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_pkg::servodata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_pkg::servodata_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_pkg::servodata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "976b722a95bbf1a80c00724ccfc64d4e";
  }

  static const char* value(const ::robot_pkg::servodata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x976b722a95bbf1a8ULL;
  static const uint64_t static_value2 = 0x0c00724ccfc64d4eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_pkg::servodata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_pkg/servodata";
  }

  static const char* value(const ::robot_pkg::servodata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_pkg::servodata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32 servo0\n"
"int32 servo1\n"
"int32 servo2\n"
"int32 servo3\n"
"int32 servo4\n"
"int32 servo5\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::robot_pkg::servodata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_pkg::servodata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.servo0);
      stream.next(m.servo1);
      stream.next(m.servo2);
      stream.next(m.servo3);
      stream.next(m.servo4);
      stream.next(m.servo5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servodata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_pkg::servodata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_pkg::servodata_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "servo0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo0);
    s << indent << "servo1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo1);
    s << indent << "servo2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo2);
    s << indent << "servo3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo3);
    s << indent << "servo4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo4);
    s << indent << "servo5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servo5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PKG_MESSAGE_SERVODATA_H
